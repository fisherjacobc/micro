import { EntityRepository } from "@mikro-orm/core";
import { InjectRepository } from "@mikro-orm/nestjs";
import { BadRequestException, Injectable } from "@nestjs/common";
import { checkThumbnailSupport, generateThumbnailToStream } from "@ryanke/thumbnail-generator";
import { FastifyReply, FastifyRequest } from "fastify";
import getStream from "get-stream";
import { DateTime } from "luxon";
import sharp from "sharp";
import { File } from "../file/file.entity";
import { FileService } from "../file/file.service";
import { StorageService } from "../storage/storage.service";
import { Thumbnail } from "./thumbnail.entity";

@Injectable()
export class ThumbnailService {
  private static readonly THUMBNAIL_SIZE = 200;
  private static readonly THUMBNAIL_TYPE = "image/webp";
  constructor(
    @InjectRepository(Thumbnail) private thumbnailRepo: EntityRepository<Thumbnail>,
    @InjectRepository(File) private fileRepo: EntityRepository<File>,
    private storageService: StorageService,
    private fileService: FileService
  ) {}

  async getThumbnail(fileId: string) {
    return this.thumbnailRepo.findOneOrFail(fileId);
  }

  async createThumbnail(file: File) {
    const start = Date.now();
    const supported = checkThumbnailSupport(file.type);
    if (!supported) {
      throw new BadRequestException("That file type does not support thumbnails.");
    }

    const filePath = this.storageService.getPathFromHash(file.hash);
    const thumbnailStream = await generateThumbnailToStream(file.type, filePath, {
      type: ThumbnailService.THUMBNAIL_TYPE,
      size: { height: ThumbnailService.THUMBNAIL_SIZE },
    });

    const data = await getStream.buffer(thumbnailStream);

    // todo: fileMetadata should be added elsewhere or maybe generated by the thumbnail generator
    const fileMetadata = await sharp(filePath).metadata();
    file.metadata = { height: fileMetadata.height, width: fileMetadata.width };

    // todo: thumbnailMetadata should be generated by the thumbnail generator
    const thumbnailMetadata = await sharp(data).metadata();
    const duration = Date.now() - start;
    const thumbnail = this.thumbnailRepo.create({
      data: data,
      duration: duration,
      size: data.length,
      type: ThumbnailService.THUMBNAIL_TYPE,
      width: thumbnailMetadata.width!,
      height: thumbnailMetadata.height!,
      file: file,
    });

    this.fileRepo.persist(file);
    this.thumbnailRepo.persist(thumbnail);
    await this.thumbnailRepo.flush();
    return thumbnail;
  }

  async sendThumbnail(fileId: string, request: FastifyRequest, reply: FastifyReply) {
    const existing = await this.thumbnailRepo.findOne(fileId, { populate: ["data"] });
    if (existing) {
      return reply
        .header("X-Micro-Generated", "false")
        .header("Content-Type", ThumbnailService.THUMBNAIL_TYPE)
        .header("Cache-Control", "public, max-age=31536000")
        .header("Expires", DateTime.local().plus({ years: 1 }).toHTTP())
        .header("X-Content-Type-Options", "nosniff")
        .send(existing.data);
    }

    const file = await this.fileService.getFile(fileId, request);
    const thumbnail = await this.createThumbnail(file);
    return reply
      .header("X-Micro-Generated", "true")
      .header("X-Micro-Duration", thumbnail.duration)
      .header("Content-Type", ThumbnailService.THUMBNAIL_TYPE)
      .send(thumbnail.data);
  }
}
